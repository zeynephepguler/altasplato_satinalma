@{
    ViewData["Title"] = "ALTAŞ Plato";
    var dogumGunuMesajlari = ViewBag.DogumGunuMesajlari as List<string>;
}
@* @model List<DovizKuru> *@

<div class="card shadow border-0 mt-4 col-12">
    <div class="card-header rounded bg-plato ml-0 py-3">
        <div class="col-12 text-light text-center">
            <h3 class="display-8"> ALTAŞ Plato </h3>
        </div>
    </div>
    <div class="card-body">

        @if (dogumGunuMesajlari != null && dogumGunuMesajlari.Any())
        {
            <div class="birthday-alert text-center p-4 mb-4 rounded shadow position-relative">
               <h1>
                    🎉🎉🎉
               </h1>
                <h3 class="mb-3" style="font-weight: 700; color: #d48806;">
                    
                    🎊 Bugün Doğum Günü Olan Çalışanlarımız! 🎂
                </h3>
               
                <ul class="list-unstyled" style="font-size: 1.3rem; font-weight: 600; color: #b35b00;">
                    @foreach (var mesaj in dogumGunuMesajlari)
                    {
                        <li class="mb-2">
                            <span style="margin-right:8px;">🎈</span>@mesaj
                        </li>
                    }
                </ul>
                <h1>
                    🎉🎉🎉
                </h1>
                <canvas id="confetti-canvas" style="position:absolute; top:0; left:0; width:100%; height:100%; pointer-events:none;"></canvas>
            </div>

            <style>
                .birthday-alert {
                    background: linear-gradient(135deg, #fff8e1 0%, #ffd54f 100%);
                    border: 2px solid #ffc107;
                    box-shadow: 0 0 15px 3px rgba(255, 193, 7, 0.7);
                    animation: pulseGlow 3s ease-in-out infinite;
                    overflow: hidden;
                }

                @@keyframes pulseGlow {
                    0%, 100% {
                        box-shadow: 0 0 15px 3px rgba(255, 193, 7, 0.7);
                    }

                    50% {
                        box-shadow: 0 0 25px 8px rgba(255, 193, 7, 1);
                    }
                }
            </style>

            <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
            <script>
                setTimeout(() => {
                    const canvas = document.getElementById('confetti-canvas');
                    const myConfetti = confetti.create(canvas, { resize: true, useWorker: true });

                    myConfetti({
                        particleCount: 150,
                        spread: 100,
                        origin: { y: 0.6 },
                    });

                    setTimeout(() => {
                        myConfetti({
                            particleCount: 100,
                            spread: 70,
                            origin: { x: 0.2, y: 0.3 }
                        });
                        myConfetti({
                            particleCount: 100,
                            spread: 70,
                            origin: { x: 0.8, y: 0.3 }
                        });
                    }, 1000);
                }, 500);
            </script>
        }

        <div class="text-center bg-platocard py-4">
            <p>ALTAŞ Plato'ya Hoşgeldiniz.</p>

            <div class="container mt-4">
                <h2 class="text-center mb-4">Güncel Döviz Kurları</h2>
                
            </div>
        </div>



        <!DOCTYPE html>
        <html lang="tr">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Alüminyum Tahmini Fiyat</title>
            <style>
                body {
                    font-family: Arial;
                    text-align: center;
                    margin: 30px;
                }

                #price-container {
                    display: inline-block;
                    padding: 20px;
                    border: 1px solid #ccc;
                    border-radius: 10px;
                    background-color: #f9f9f9;
                }

                .current-price {
                    color: green;
                    font-size: 26px;
                    font-weight: bold;
                    margin: 10px 0;
                }

                .last-updated {
                    color: gray;
                    font-style: italic;
                    margin-top: 10px;
                }

                .notice {
                    color: orange;
                    font-size: 14px;
                    margin-top: 10px;
                }
            </style>
        </head>
        <body>
            <h1>Alüminyum Güncel Fiyat (Tahmini)</h1>
            <div id="price-container">
                <div id="current-price">Yükleniyor...</div>
                <div id="last-updated"></div>
                <div class="notice">Tahmini fiyat, gerçek LME değerine yakın olabilir. USD/ton cinsindendir.</div>
            </div>

            <script>
                // Twelve Data API'ye erişim için gerekli API anahtarı
                const API_KEY = 'cc3ca1ea70fa4ecdaf673fb5cc170a8e';

                // Alüminyum fiyatını çekmek için kullanılacak sembol
                const SYMBOL = 'ALMMF'; // Ücretsiz kullanılabilen sembol

                // Verilerin alınacağı zaman aralığı (örnek: günlük)
                const INTERVAL = '1day';

                // API'den kaç veri alınacağı (1 = sadece son fiyat)
                const OUTPUT_SIZE = 1;

                // Verilerin yenilenme sıklığı (milisaniye cinsinden → 86400000 = 24 saat)
                const REFRESH_INTERVAL = 86400000;

                // Asenkron (async) fonksiyon: API'den alüminyum fiyatını çekmek için kullanılır
                async function fetchAluminum() {
                    // HTML'deki fiyat ve güncelleme alanlarını JavaScript'e tanıtıyoruz
                    const priceDiv = document.getElementById('current-price');
                    const lastUpdatedDiv = document.getElementById('last-updated');

                    // Kullanıcıya veri yükleniyor bilgisini gösteriyoruz
                    priceDiv.innerText = 'Yükleniyor...';
                    lastUpdatedDiv.innerText = '';

                    // API isteği için gerekli URL'yi oluşturuyoruz
                    const url = `https://api.twelvedata.com/time_series?symbol=${SYMBOL}&interval=${INTERVAL}&outputsize=${OUTPUT_SIZE}&apikey=${API_KEY}`;

                    try {
                        // API'ye isteği gönderiyoruz (veriyi çekiyoruz)
                        const res = await fetch(url);

                        // Gelen yanıtı JSON formatına çeviriyoruz
                        const data = await res.json();

                        // Eğer API'den geçerli veriler geldiyse (data.values doluysa)
                        if (data.values && data.values.length > 0) {
                            // Son kapanış fiyatını alıyoruz ve ondalık olarak iki basamağa yuvarlıyoruz
                            const price = parseFloat(data.values[0].close).toFixed(2);  // Fiyatı ekrana yazdırıyoruz
                            priceDiv.innerText = `$${price} USD/ton`;

                            // Güncelleme zamanını Türkçe biçimde gösteriyoruz
                            lastUpdatedDiv.innerText = `Son güncelleme: ${new Date().toLocaleString('tr-TR')}`;
                        }
                        // Eğer veri bulunamadıysa kullanıcıya uyarı mesajı gösteriyoruz
                        else {
                            priceDiv.innerText = 'Veri bulunamadı.';
                            lastUpdatedDiv.innerText = `Sembol veya API key kontrol edin.`;
                        }
                    } catch (err) {
                        // Eğer API isteğinde bir hata oluşursa (örnek: internet yoksa)
                        priceDiv.innerText = 'Veri alınamadı.';
                        lastUpdatedDiv.innerText = `Hata: ${err.message}`;
                    }
                }

                // Sayfa ilk açıldığında veriyi hemen çekmek için fonksiyonu çağırıyoruz
                fetchAluminum();

                // Veriyi her 24 saatte (1 günde) bir otomatik yenilemek için zamanlayıcı oluşturuyoruz
                setInterval(fetchAluminum, REFRESH_INTERVAL);
            </script>

        </body>
    </html>






    </div>
</div>
